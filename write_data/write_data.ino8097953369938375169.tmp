#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 15  
#define RST_PIN 16 

/* Create an instance of MFRC522 */
MFRC522 mfrc522(SS_PIN, RST_PIN);
/* Create an instance of MIFARE_Key */
MFRC522::MIFARE_Key key;          
//writing data to block 2
int blockNum = 4;  
int blockNum1 = 5;
int blockNum2 = 6;
int blockNum3 = 7;
int blockNum4 = 8;
int blockNum5 = 9;
//this is the data which will be written to the rfid card
byte blockData [16] = {"4NI19EC003"};
byte firstName [16] =  {"Abhipray"};
byte lastName [16] = {"Dumka"};
byte class_ [16] = {"403"};
byte lab1 [16] = {"489"};
byte lab2 [16] = {"589"};
/* Create another array to read data from Block */
/* Length of buffer should be 2 Bytes more than the size of Block (16 Bytes) */
byte bufferLen = 18;
byte readBlockData[18];
byte readBlockData1[18]; // this is for reading the first name
byte readBlockData2[18]; // this is for reading the last name
byte readBlockData3[18]; // this is for reading class
byte readBlockData4[18]; // this is for reading lab1
byte readBlockdata5[18]; // this is for reading lab2
MFRC522::StatusCode status;

void setup() 
{
  /* Initialize serial communications with the PC */
  Serial.begin(115200);
  /* Initialize SPI bus */
  SPI.begin();
  /* Initialize MFRC522 Module */
  mfrc522.PCD_Init();
  Serial.println("Scan a MIFARE 1K Tag to write data...");
}

void loop()
{
  /* Prepare the key for authentication */
  /* All keys are set to FFFFFFFFFFFFh at chip delivery from the factory */
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }
  /* Look for new cards */
  /* Reset the loop if no new card is present on RC522 Reader */
  if ( ! mfrc522.PICC_IsNewCardPresent())
  {
    return;
  }
  
  /* Select one of the cards */
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  Serial.print("\n");
  Serial.println("**Card Detected**");
  /* Print UID of the Card */
  Serial.print(F("Card UID:"));
  for (byte i = 0; i < mfrc522.uid.size; i++)
  {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.print("\n");
  /* Print type of card (for example, MIFARE 1K) */
  Serial.print(F("PICC type: "));
  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
  Serial.println(mfrc522.PICC_GetTypeName(piccType));
   // writing the USN to the CARD
   WriteDataToBlock(blockNum, blockData);
   Serial.print("\n");
   ReadDataFromBlock(blockNum, readBlockData);
   // writing the first name
   Serial.print("\n");
   WriteDataToBlock(blockNum1, firstName);
   Serial.print("\n");
   ReadDataFromBlock(blockNum1, readBlockData1);
   // wrinting the lastname
   Serial.print("\n");
   WriteDataToBlock(blockNum2, lastName);
   Serial.print("\n");
   ReadDataFromBlock(blockNum2, readBlockData2);
   // writing the class
   Serial.print("\n");
   WriteDataToBlock(blockNum3, class_);
   Serial.print("\n");
   ReadDataFromBlock(blockNum3, readBlockData3);
   // writing lab1 to the card
   Serial.print("\n");
   WriteDataToBlock(blockNum4, lab1);
   Serial.print("\n");
   ReadDataFromBlock(blockNum4, readBlockData4);
   //wrinting lab2 to card
    Serial.print("\n");
   WriteDataToBlock(blockNum5, lab2);
   Serial.print("\n");
   ReadDataFromBlock(blockNum5, readBlockdata5);
   /* If you want to print the full memory dump, uncomment the next line */
   //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));
   
  
  
}



void WriteDataToBlock(int blockNum, byte blockData[]) 
{
  /* Authenticating the desired data block for write access using Key A */
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK)
  {
    Serial.print("Authentication failed for Write: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  else
  {
    Serial.println("Authentication success");
  }

  
  /* Write data to the block */
  status = mfrc522.MIFARE_Write(blockNum, blockData, 16);
  if (status != MFRC522::STATUS_OK)
  {
    Serial.print("Writing to Block failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  else
  {
    Serial.println("Data was written into Block successfully");
  }
  
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) 
{
  /* Authenticating the desired data block for Read access using Key A */
  byte status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));

  if (status != MFRC522::STATUS_OK)
  {
     Serial.print("Authentication failed for Read: ");
     Serial.println(status);
     return;
  }
  else
  {
    Serial.println("Authentication success");
  }

  /* Reading data from the Block */
  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK)
  {
    Serial.print("Reading failed: ");
    Serial.println(status);
    return;
  }
  else
  {
    Serial.println("Block was read successfully"); 
    Serial.print("\n");
   Serial.print("Data in Block:");
   Serial.print(blockNum);
   Serial.print(" --> ");
   for (int j=0 ; j<16 ; j++)
   {
     Serial.write(readBlockData[j]);
   }
   Serial.print("\n");
   
    
  }
  
}
